#!/usr/bin/env python3

import os
import re
import sys
import datetime
import subprocess
import webbrowser
from git import Repo, GitCommandError
from github import Github
from dotenv import load_dotenv

def parse_pr_url(url):
    match = re.match(r'https://github.com/(?P<owner>[^/]+)/(?P<repo>[^/]+)/pull/(?P<pr_number>\d+)', url)
    if not match:
        raise ValueError("Invalid GitHub PR URL format.")
    return match.group("owner"), match.group("repo"), int(match.group("pr_number"))

def create_timestamped_directory(base_dir="working_directory"):
    timestamp = str(int(datetime.datetime.now().timestamp()))
    path = os.path.abspath(os.path.join(base_dir, timestamp))
    os.makedirs(path, exist_ok=False)
    return path, timestamp

def run_git_command(command, cwd):
    result = subprocess.run(command, cwd=cwd, capture_output=True, text=True)
    if result.returncode != 0:
        raise RuntimeError(f"Command failed: {' '.join(command)}\n{result.stderr}")
    return result.stdout.strip()

def main():
    if len(sys.argv) != 3:
        print("Usage: python reapply_pr_from_url.py <github_pr_url> <commit_message>")
        sys.exit(1)

    pr_url = sys.argv[1]
    commit_msg = sys.argv[2]

    load_dotenv()
    github_token = os.getenv("GITHUB_TOKEN")
    github_username = os.getenv("GITHUB_USERNAME")

    if not github_token or not github_username:
        print("❌ GITHUB_TOKEN and GITHUB_USERNAME must be set in the .env file.")
        sys.exit(1)

    try:
        owner, repo_name, pr_number = parse_pr_url(pr_url)
    except ValueError as e:
        print(f"❌ {e}")
        sys.exit(1)

    full_repo_name = f"{owner}/{repo_name}"
    working_root, timestamp = create_timestamped_directory()
    print(f"🗂️  Working directory created: {working_root}")

    repo_dir = os.path.join(working_root, repo_name)
    os.makedirs(repo_dir, exist_ok=False)

    # Connect to GitHub API
    gh = Github(github_token)
    repo_api = gh.get_repo(full_repo_name)
    pr = repo_api.get_pull(pr_number)

    source_branch = pr.head.ref
    dest_branch = pr.base.ref
    clone_url = pr.head.repo.ssh_url if pr.head.repo.private else pr.head.repo.clone_url
    new_branch = f"{source_branch}-new"

    print(f"""
📋 PR Info:
- Repo: {full_repo_name}
- Source Branch: {source_branch}
- Destination Branch: {dest_branch}
- Clone URL: {clone_url}
- New Branch: {new_branch}
- Repo Checkout Path: {repo_dir}
""")

    print(f"📦 Cloning repository into '{repo_dir}'...")
    Repo.clone_from(clone_url, repo_dir)

    repo = Repo(repo_dir)
    git = repo.git

    try:
        print("📥 Fetching latest from origin...")
        git.fetch("origin")

        print("🔄 Checking out and updating branches...")
        repo.git.checkout(dest_branch)
        git.pull("origin", dest_branch)
        repo.git.checkout(source_branch)
        git.pull("origin", source_branch)

        # Generate clean diff
        diff_file = os.path.join(working_root, "pr.diff")
        print(f"📝 Generating diff to {diff_file}...")
        with open(diff_file, "w") as f:
            f.write(git.diff(f"{dest_branch}..{source_branch}", binary=True))

        # Switch to new clean branch from destination
        print(f"🌿 Creating new branch '{new_branch}' from '{dest_branch}'...")
        repo.git.checkout(dest_branch)
        repo.git.checkout('-b', new_branch)

        print("📎 Applying diff...")
        try:
            git.apply(diff_file)
        except GitCommandError as err:
            print("❌ Could not apply diff cleanly:")
            print(err)
            sys.exit(1)

        repo.git.add(A=True)
        repo.index.commit(commit_msg)

        print(f"🚀 Pushing '{new_branch}' to origin...")
        git.push('--set-upstream', 'origin', new_branch)

        print("📬 Creating new Pull Request...")
        new_pr = repo_api.create_pull(
            title=commit_msg,
            body=commit_msg,
            head=new_branch,
            base=dest_branch
        )

        print("\n✅✅✅ Pull Request successfully created!")
        print(f"🔗 New PR URL: {new_pr.html_url}\n")
        webbrowser.open(new_pr.html_url)

    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()