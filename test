package helpers;

import pages.workflows.common.CommonWorkflows;
import pages.workflows.common.CancelBookingWorkflow;
import tests.BaseTest;
import enums.Environments;
import tests.util.TagBuilder;
import tests.util.Tags;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

/**
 * AgentHelper provides a clean, reusable way to initiate and work with
 * agent test flows without relying on JUnit annotations or inheritance.
 */
public class AgentHelper {

    private final Class<?> testClass;
    private Method testMethod;
    private final List<String> bookingNumbersToCancel = new ArrayList<>();

    public AgentHelper(Class<?> testClass) {
        this.testClass = testClass;
        TagBuilder.addTags(Tags.agent, Tags.ui);
        setTestAppContext();
    }

    public void setTestMethod(Method method) {
        this.testMethod = method;
    }

    public void initStartPage() throws Exception {
        loginAgent();

        // Mark page init for tracking
        BaseTest.pageHasBeenInitialized = true;

        // Set session metadata in PROD
        if (BaseTest.getEnvironment() == Environments.PROD) {
            BaseTest.updateSessionGlobalSettings(null, testClass, testMethod);
        }
    }

    public void loginAgent() {
        CommonWorkflows.loginToAgent();
    }

    private void setTestAppContext() {
        BaseTest.setTestApp("agent"); // marks app context for logs/test reporting
    }

    public void addBookingToCancel(String bookingNumber) {
        bookingNumbersToCancel.add(bookingNumber);
    }

    public void cancelPendingBookings() {
        if (!bookingNumbersToCancel.isEmpty()) {
            CancelBookingWorkflow.cancelBookings(bookingNumbersToCancel, false);
            bookingNumbersToCancel.clear();
        }
    }
}



@Test
public void hybridFlowTest() throws Exception {
    AgentHelper agentHelper = new AgentHelper(this.getClass());
    agentHelper.setTestMethod(this.getClass().getMethod("hybridFlowTest"));
    agentHelper.initStartPage();

    // do some agent-side booking
    // agentHelper.addBookingToCancel(...); if needed later

    // later maybe: use ConsumerHelper too

    agentHelper.cancelPendingBookings(); // cleanup if required
}
