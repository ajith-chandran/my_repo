import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;
import java.util.stream.Collectors;

public class WirelessAmendOrderCommandHelper {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @SuppressWarnings("unchecked")
    public Map<String, List<String>> extractProductIdsGroupedByStatus(SuccessActions promotionsAction) {
        try {
            String jsonString = (String) promotionsAction.getData();  // JSON string, not a Map
            JsonNode root = objectMapper.readTree(jsonString);

            JsonNode immediatePromotions = root
                    .path("promotions")
                    .path("promotionQualification")
                    .path("immediatePromotion");

            if (!immediatePromotions.isArray()) {
                return Collections.emptyMap();
            }

            // Now group by "status", mapping to a list of "id"s
            return new IterableSupport(immediatePromotions).stream()
                    .filter(p -> p.hasNonNull("status") && p.hasNonNull("id"))
                    .collect(Collectors.groupingBy(
                            p -> p.get("status").asText(),
                            Collectors.mapping(p -> p.get("id").asText(), Collectors.toList())
                    ));

        } catch (Exception e) {
            e.printStackTrace();  // or use a logger
            return Collections.emptyMap();
        }
    }

    // Utility wrapper to stream over JsonNode arrays in Java 8
    private static class IterableSupport implements Iterable<JsonNode> {
        private final JsonNode node;

        public IterableSupport(JsonNode node) {
            this.node = node;
        }

        @Override
        public Iterator<JsonNode> iterator() {
            return node.iterator();
        }

        public Stream<JsonNode> stream() {
            return StreamSupport.stream(spliterator(), false);
        }
    }
}