public Map<String, List<String>> extractProductIdsGroupedByStatus(SuccessActions promotionsAction) {
    Map<String, Object> promotionNode = (Map<String, Object>) promotionsAction.getData();
    
    if (promotionNode == null || !promotionNode.containsKey("promotions")) {
        return Collections.emptyMap();
    }

    Object promotionsObj = promotionNode.get("promotions");
    if (!(promotionsObj instanceof Map)) {
        return Collections.emptyMap();
    }

    Map<String, Object> promotions = (Map<String, Object>) promotionsObj;

    if (!promotions.containsKey("promotionQualification")) {
        return Collections.emptyMap();
    }

    Object promoQualObj = promotions.get("promotionQualification");
    if (!(promoQualObj instanceof Map)) {
        return Collections.emptyMap();
    }

    Map<String, Object> promotionQualification = (Map<String, Object>) promoQualObj;

    Object immediatePromotionsObj = promotionQualification.get("immediatePromotion");
    if (!(immediatePromotionsObj instanceof List)) {
        return Collections.emptyMap();
    }

    List<Map<String, Object>> immediatePromotions = (List<Map<String, Object>>) immediatePromotionsObj;

    return immediatePromotions.stream()
        .filter(Objects::nonNull)
        .collect(Collectors.groupingBy(
            p -> (String) p.get("status"),
            Collectors.mapping(p -> (String) p.get("id"), Collectors.toList())
        ));
}