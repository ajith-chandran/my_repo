import shelve
import requests
import time
import json
import os
import argparse
import random
import string
import sys
import threading
from jinja2 import Template
from datetime import datetime
from colorama import Fore, Style, init as colorama_init
from urllib.parse import urlparse

colorama_init(autoreset=True)

class APIRunner:
    def __init__(self, sequence_name, environment, verbosity, resume_key=None):
        base_dir = os.path.dirname(os.path.abspath(__file__))
        config_path = os.path.join(base_dir, 'config.json')
        with open(config_path, 'r') as f:
            self.config = json.load(f)

        self.sequence_name = sequence_name
        self.environment = environment
        self.variables = self.config.get('env', {}).copy()
        self.generators = self.config.get('generators', {})
        self.base_dir = base_dir
        self.skip_retry_flag = False
        self.verbosity = verbosity
        self.session_key = resume_key
        self.session_db_path = os.path.join(self.base_dir, 'session_db')
        if resume_key:
            self.load_session(resume_key)

        self.log_path = os.path.join(self.base_dir, 'output', 'verbose.log')
        os.makedirs(os.path.dirname(self.log_path), exist_ok=True)

    def log_verbose(self, message):
        if self.verbosity >= 3:
            with open(self.log_path, 'a', encoding='utf-8') as f:
                f.write(message + '\n')

    def print_and_log(self, message):
        print(message)
        self.log_verbose(message)

    def listen_for_skip(self):
        self.print_and_log("Press 's' then Enter at any time to skip retries for the current step.")
        while True:
            if sys.stdin.read(1).lower() == 's':
                self.skip_retry_flag = True
                break

    # ... keep the rest of the class unchanged ...

    def make_request(self, step_name):
        # ... inside your make_request logic ...
                if self.verbosity >= 3:
                    self.print_and_log(f"\n{Fore.CYAN}--- Request: {step_name} ---{Style.RESET_ALL}")
                    self.print_and_log(f"URL: {url}")
                    self.print_and_log(f"Method: {method}")
                    self.print_and_log(f"Headers: {headers}")
                    if body:
                        body_str = json.dumps(body, indent=2)
                        self.print_and_log(f"Payload: {body_str}")
                    elif form_data:
                        form_str = json.dumps(form_data, indent=2)
                        self.print_and_log(f"Form Data: {form_str}")

                # ...
                if self.verbosity >= 3:
                    self.print_and_log(f"{Fore.CYAN}--- Response: {step_name} ---{Style.RESET_ALL}")
                    try:
                        response_json = response.json()
                        self.print_and_log(json.dumps(response_json, indent=2))
                    except Exception:
                        self.print_and_log(response.text)

    # ... same for other prints inside success, failure, retry ...

def list_scenarios_and_environments(config):
    print(f"{Fore.YELLOW}Available Sequences:{Style.RESET_ALL}")
    for seq in config.get('sequences', {}):
        print(f" - {seq}")

    print(f"
{Fore.YELLOW}Available Environments:{Style.RESET_ALL}")
    for env in config.get('environments', {}):
        print(f" - {env}")


def run_sequence(sequence, environment, verbosity):
    runner = APIRunner(sequence, environment, verbosity)
    runner.run()


import shelve
from datetime import datetime

SESSION_DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'output', 'sessions.db')
SESSION_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'output')
os.makedirs(SESSION_DIR, exist_ok=True)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run API sequence from config with support for session and verbosity")
    parser.add_argument('--run', '-r', nargs=2, metavar=('SEQUENCE', 'ENVIRONMENT'), help="Run a specific sequence with environment")
parser.add_argument('--resume', metavar='SESSION_KEY', help="Resume a sequence from a previous failed session")
parser.add_argument('--list', action='store_true', help="List available sequences and environments")
parser.add_argument('--list-sessions', action='store_true', help="List saved session keys")
parser.add_argument('--delete-session', metavar='SESSION_KEY', help="Delete a specific session by key")
parser.add_argument('--delete-all-sessions', action='store_true', help="Delete all saved sessions"), help="Run a specific sequence with environment")
    parser.add_argument('--resume', metavar='SESSION_KEY', help="Resume a sequence from a previous failed session")
    parser.add_argument('--list', action='store_true', help="List available sequences and environments")
    parser.add_argument('-v', '--verbose', action='count', default=0, help="Increase verbosity level (-v, -vv, -vvv)")
    args = parser.parse_args()

if args.list_sessions:
    with shelve.open(SESSION_DB_PATH) as db:
        if not db:
            print("No saved sessions.")
        for k in db:
            meta = db[k].get("meta", {})
            print(f"Session {k}: Sequence={meta.get('sequence')}, Env={meta.get('env')}, Created={meta.get('created')}")
    sys.exit(0)

if args.delete_session:
    with shelve.open(SESSION_DB_PATH) as db:
        if args.delete_session in db:
            del db[args.delete_session]
            print(f"Deleted session {args.delete_session}")
        else:
            print(f"Session {args.delete_session} not found")
    sys.exit(0)

if args.delete_all_sessions:
    with shelve.open(SESSION_DB_PATH) as db:
        db.clear()
        print("All sessions deleted.")
    sys.exit(0)

    if args.run:
        sequence, environment = args.run
        runner = APIRunner(sequence, environment, args.verbose)
        runner.run()
    elif args.resume:
        runner = APIRunner(None, None, args.verbose, resume_key=args.resume)
        runner.run()
    elif args.list:
        print("Available sequences:")
        with open(os.path.join(os.path.dirname(__file__), 'config.json')) as f:
            config = json.load(f)
            for seq in config.get("sequences", {}):
                print(f"  - {seq}")
            print("\nAvailable environments:")
            for env in config.get("environments", {}):
                print(f"  - {env}")
    else:
        parser.print_help()
    parser = argparse.ArgumentParser(description="Run API sequence from config", add_help=True)
    parser.add_argument('--run', '-r', nargs=2, metavar=('SEQUENCE', 'ENVIRONMENT'), help="Run a specific sequence with environment")
parser.add_argument('--resume', metavar='SESSION_KEY', help="Resume a sequence from a previous failed session")
parser.add_argument('--list', action='store_true', help="List available sequences and environments")
parser.add_argument('--list-sessions', action='store_true', help="List saved session keys")
parser.add_argument('--delete-session', metavar='SESSION_KEY', help="Delete a specific session by key")
parser.add_argument('--delete-all-sessions', action='store_true', help="Delete all saved sessions"), help="Run a specific sequence with environment")
parser.add_argument('--resume', metavar='SESSION_KEY', help="Resume a sequence from a previous failed session")
parser.add_argument('--list', action='store_true', help="List available sequences and environments")
parser.add_argument('-v', '--verbose', action='count', default=0, help="Increase verbosity level (-v, -vv, -vvv)"), help="Run a specific sequence with environment")
    ")")
    parser.add_argument('--run', '-r', nargs=2, metavar=('SEQUENCE', 'ENVIRONMENT'), help="Run a specific sequence with environment")
parser.add_argument('--resume', metavar='SESSION_KEY', help="Resume a sequence from a previous failed session")
parser.add_argument('--list', action='store_true', help="List available sequences and environments")
parser.add_argument('--list-sessions', action='store_true', help="List saved session keys")
parser.add_argument('--delete-session', metavar='SESSION_KEY', help="Delete a specific session by key")
parser.add_argument('--delete-all-sessions', action='store_true', help="Delete all saved sessions"), help="Run a specific sequence with environment")
parser.add_argument('--resume', metavar='SESSION_KEY', help="Resume a sequence from a previous failed session")
parser.add_argument('--list', action='store_true', help="List available sequences and environments")
parser.add_argument('-v', '--verbose', action='count', default=0, help="Increase verbosity level (-v, -vv, -vvv)")")
    parser.add_argument('--run', '-r', nargs=2, metavar=('SEQUENCE', 'ENVIRONMENT'), help="Run a specific sequence with environment")
parser.add_argument('--resume', metavar='SESSION_KEY', help="Resume a sequence from a previous failed session")
parser.add_argument('--list', action='store_true', help="List available sequences and environments")
parser.add_argument('--list-sessions', action='store_true', help="List saved session keys")
parser.add_argument('--delete-session', metavar='SESSION_KEY', help="Delete a specific session by key")
parser.add_argument('--delete-all-sessions', action='store_true', help="Delete all saved sessions"), help="Run a specific sequence with environment")
parser.add_argument('--resume', metavar='SESSION_KEY', help="Resume a sequence from a previous failed session")
parser.add_argument('--list', action='store_true', help="List available sequences and environments")
parser.add_argument('-v', '--verbose', action='count', default=0, help="Increase verbosity level (-v, -vv, -vvv)")
    args = parser.parse_args()

    if args.list:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        config_path = os.path.join(base_dir, 'config.json')
        with open(config_path, 'r') as f:
            config = json.load(f)
        list_scenarios_and_environments(config)
        sys.exit(0)

    if args.run:
    sequence, environment = args.run
    run_sequence(sequence, environment, args.verbose)
elif args.resume:
    # Placeholder: Add resume logic here
    print(f"Resuming session from key: {args.resume} (resume logic not implemented)")
    else:
        print(f"{Fore.RED}Error: You must use --run followed by sequence and environment to execute API calls.{Style.RESET_ALL}")
        sys.exit(1)

