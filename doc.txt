/**
 * End-to-end test logic for handling blackout operations on the Agent side.
 * <p>
 * This test class covers:
 * - Adding blackout dates for all hotels through the allotment calendar.
 * - Refreshing cache after blackout is added.
 * - Removing blackout entries from the calendar.
 * </p>
 * 
 * It relies on {@link AgentEndToEndBase} for agent setup, driver initialization,
 * and tag setup.
 */

/**
 * Adds a blackout for all hotels and clears the cache from the cache manager.
 * 
 * <p>This method:
 * <ul>
 *   <li>Initializes and loads the agent flow.</li>
 *   <li>Navigates to the allotment calendar.</li>
 *   <li>Adds a blackout date through the calendar UI.</li>
 *   <li>Refreshes the cache to reflect the update.</li>
 * </ul>
 * 
 * @return {@code true} upon successful blackout addition and cache refresh.
 */

/**
 * Removes previously added blackout entry from the allotment calendar.
 * 
 * <p>This method:
 * <ul>
 *   <li>Initializes the agent flow.</li>
 *   <li>Navigates to the allotment calendar.</li>
 *   <li>Deletes blackout entry through the calendar UI.</li>
 * </ul>
 * 
 * @return {@code true} upon successful blackout removal.
 */

/**
 * Hook to stop the agent session after test is completed.
 * 
 * <p>This method is mapped to the post-test lifecycle using the
 * {@code afterTestAgentHelperTest()} from the base class.</p>
 */

/**
 * Static utility to cleanly shutdown the agent and close the browser instance.
 * 
 * <p>This ensures any held resources by the agent browser are released properly
 * after the test session ends.</p>
 */