import requests
import time
import json
import os
import argparse
import random
import string
import sys
import threading
from jinja2 import Template
from datetime import datetime
from colorama import Fore, Style, init as colorama_init

colorama_init(autoreset=True)

class APIRunner:
    def __init__(self, sequence_name, environment, verbosity):
        base_dir = os.path.dirname(os.path.abspath(__file__))
        config_path = os.path.join(base_dir, 'config.json')
        with open(config_path, 'r') as f:
            self.config = json.load(f)

        self.sequence_name = sequence_name
        self.environment = environment
        self.variables = self.config.get('env', {}).copy()
        self.generators = self.config.get('generators', {})
        self.base_dir = base_dir
        self.skip_retry_flag = False
        self.verbosity = verbosity

    def render_template(self, template_str):
        template = Template(template_str)
        return template.render(**self.variables)

    def load_template(self, template_path):
        full_path = os.path.join(self.base_dir, template_path)
        with open(full_path, 'r') as f:
            return f.read()

    def make_request(self, step_name):
        step = self.config['api_calls'][step_name]
        system = step.get('system')
        env_systems = self.config.get('environments', {}).get(self.environment, {})
        base_url = env_systems.get(system)
        endpoint_template = self.render_template(step['endpoint'])
        url = base_url + endpoint_template
        method = step.get('method', 'GET').upper()
        headers = json.loads(self.render_template(json.dumps(step.get('headers', {}))))
        timeout = step.get('timeout', 10)
        retries = step.get('retries')
        retry_delay = step.get('retry_delay', 2)
        duration_limit = step.get('duration_limit', 300)
        template_path = step.get('template')
        form_data = step.get('form_data')
        extract = step.get('extract', {})
        print_output = step.get('print_output', [])
        success_condition = step.get('success_condition')

        body = None
        if template_path:
            template_str = self.load_template(template_path)
            rendered_body = self.render_template(template_str)
            body = json.loads(rendered_body)

        auth = None
        if 'auth' in step and step['auth'].get('type') == 'basic':
            username = self.render_template(step['auth'].get('username', ''))
            password = self.render_template(step['auth'].get('password', ''))
            auth = (username, password)

        attempt = 0
        start_time = datetime.now()
        approx_total_attempts = (duration_limit // retry_delay) if retries is None else retries

        while True:
            if retries is not None and attempt >= retries:
                raise Exception(f"Failed to call {step_name} after {retries} retries")

            if retries is None and (datetime.now() - start_time).total_seconds() > duration_limit:
                raise TimeoutError(f"Exceeded total duration limit for {step_name}")

            attempt += 1
            remaining = (retries - attempt) if retries is not None else (approx_total_attempts - attempt)

            request_kwargs = {
                'method': method,
                'url': url,
                'headers': headers,
                'timeout': timeout,
                'auth': auth
            }

            if form_data:
                request_kwargs['data'] = {
                    k: self.render_template(str(v)) for k, v in form_data.items()
                }
            elif body:
                request_kwargs['json'] = body

            if self.verbosity >= 3:
                self.print_and_log(f"\n{Fore.CYAN}--- Request: {step_name} ---{Style.RESET_ALL}")
                self.print_and_log(f"URL: {url}")
                self.print_and_log(f"Method: {method}")
                self.print_and_log(f"Headers: {headers}")
                if body:
                    self.print_and_log(f"Payload: {json.dumps(body, indent=2)}")
                elif form_data:
                    self.print_and_log(f"Form Data: {json.dumps(form_data, indent=2)}")

            print(f"{Fore.GREEN}{step_name}{Style.RESET_ALL}")
            print(f"Calling method {method} (attempt {attempt})")
            response = requests.request(**request_kwargs)

            if self.verbosity >= 3:
                self.print_and_log(f"{Fore.CYAN}--- Response: {step_name} ---{Style.RESET_ALL}")
                try:
                    response_json = response.json()
                    self.print_and_log(json.dumps(response_json, indent=2))
                except Exception:
                    self.print_and_log(response.text)

            response.raise_for_status()
            response_json = response.json()

            if extract:
                self.extract_variables(extract, response_json)

            if success_condition:
                if self.evaluate_success_condition(success_condition, response_json):
                    print(f"{Fore.GREEN}Success condition met for {step_name}.{Style.RESET_ALL}")
                    if print_output:
                        self.print_outputs(print_output, response_json, body or {})
                    return response
                else:
                    retry_msg = f"{Fore.RED}Condition not satisfied{Style.RESET_ALL}"
                    if isinstance(success_condition, dict) and 'message' in success_condition:
                        retry_msg = self.render_template(success_condition.get("message", retry_msg))
                    print(f"Status: {step_name} - Attempt {attempt} failed: {retry_msg} | Remaining: {remaining} | Next retry in {retry_delay}s")
                    if retries is None or attempt < retries:
                        print(f"Waiting {retry_delay} seconds before retrying...")
                        time.sleep(retry_delay)
                    raise Exception("Condition not satisfied")
            else:
                if print_output:
                    self.print_outputs(print_output, response_json, body or {})
                return response

    def run(self):
        sequence = self.config['sequences'][self.sequence_name]
        for step_name in sequence:
            try:
                self.make_request(step_name)
            except Exception as e:
                print(f"Step {step_name} failed: {e}")
                step_config = self.config['api_calls'].get(step_name, {})
                if not step_config.get("proceed_on_failure", False):
                    print("Halting execution due to failure.")
                    break
        self.print_final_summary()

    def print_and_log(self, message):
        print(message)
        # Optional: add logging to file if needed

    def print_final_summary(self):
        print(f"{Fore.YELLOW}Execution Completed{Style.RESET_ALL}")

def list_scenarios_and_environments(config):
    print(f"{Fore.YELLOW}Available Sequences:{Style.RESET_ALL}")
    for seq in config.get('sequences', {}):
        print(f" - {seq}")

    print(f"\n{Fore.YELLOW}Available Environments:{Style.RESET_ALL}")
    for env in config.get('environments', {}):
        print(f" - {env}")

def run_sequence(sequence, environment, verbosity):
    runner = APIRunner(sequence, environment, verbosity)
    runner.run()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run API sequence from config", add_help=True)
    parser.add_argument('-r', '--run', nargs=2, metavar=("SEQUENCE", "ENVIRONMENT"), help="Run a specific sequence with environment")
    parser.add_argument('-v', '--verbose', action='count', default=0, help="Increase verbosity level (-v, -vv, -vvv)")
    parser.add_argument('-l', '--list', action='store_true', help="List available sequences and environments")
    args = parser.parse_args()

    if args.list:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        config_path = os.path.join(base_dir, 'config.json')
        with open(config_path, 'r') as f:
            config = json.load(f)
        list_scenarios_and_environments(config)
        sys.exit(0)

    if args.run:
        sequence, environment = args.run
        run_sequence(sequence, environment, args.verbose)
    else:
        print(f"{Fore.RED}Error: You must use --run followed by sequence and environment to execute API calls.{Style.RESET_ALL}")
        sys.exit(1)